# Day 52
# Draw a square with the dimensions specified by the user using asterisks (*).Draw a rectangle with the dimensions specified by the user.

# drawing a square

def draw_square(size):
    side = "* " * size
    side_len = len(side)
    print(side)
    for a in range(1, size-1):
        print("*", " " * (side_len - 5), "*")
    print(side)

size_str = input("Please enter length of side: ")
size = int(size_str)

draw_square(size)


# drawing a rectangle

def draw_rectangle(a, b):
    side_a = "* " * a
    side_a_len = len(side_a)
    print(side_a)
    for i in range(1, b-1):
        print("*", " " * (side_a_len - 5), "*")
    print(side_a)

a_str = input("Please enter length of the first side: ")
a = int(a_str)
b_str = input("Please enter length of the second side: ")
b = int(b_str)

draw_rectangle(a, b)


# Day 53 
# Simple polish-english dictionary.

dict={
    "bardzo":"very",
    "nazwa":"name",
    "również":"also",
    "i":"and",
    "słowo":"word",
    "grać":"play",
    "mały":"small",
    "my":"we",
    "zdanie":"sentence",
    "jest":"is",
    "dom":"home",
    "roślina":"plant",
    "ty":"you",
    "mówić":"say",
    "z":"with",
    "zanim":"before",
    "czas":"time",
    "tylko":"only",
    "ponownie":"again",
    "długo":"long",
    "robić":"make",
    "matka":"mother",
    "rzecz":"thing",
    "nigdy":"never",
    "teraz":"now",
    "praca":"work",
    "po":"after",
    "numer":"number",
    "odpowiedź":"answer"
    }

def get_sentence(prompt):
    sentence_str = input(prompt)
    sentence = sentence_str.capitalize()
    return sentence

def sentence_translator(sentence):
    words = sentence.split()
    translated_words = []
    
    for word in words:
        if word in dict:
            translated_words.append(dict[word])
        else:
            translated_words.append(word + '*')

    new_sentence = ' '.join(translated_words)
    print(new_sentence)
            
def run_translator():
    print("Welcome in translator. This program enables you to translate polish sentences into english. Enjoy!")
    sentence = get_sentence("Enter the sentence in polish for translating into english: ")
    sentence_translator(sentence)


run_translator()


#Day 54
#Your job is to create your OWN substring function. Don't use the system one, just write it from scratch (don't use slice() or [x:y]).

def my_substring(index_start, index_end, text):
    characters = list(text)

    if index_end is None:
        return ''.join(characters[index_start:])
    else:
        return ''.join(characters[index_start: index_end])


def find_string(index_find, text):
    characters = list(text)
    print(index_find)
    return ''.join(characters[index_find:])
    
text = input("Wprowadź tekst: ")
index_start_str = input("Podaj index początkowy: ")
index_start = int(index_start_str)
index_end_str = input("Podaj index końcowy: ")
index_end = None if not index_end_str else int(index_end_str)

result = my_substring(index_start, index_end, text)
print(result)


string_to_find = input("Jakiego słowa szukasz? ")
index_find = text.find(string_to_find)

result2 = find_string(index_find, text)
print(result2)

#Day 55
#Repetition

#Day 56
#Password generator

import random
import string

def generuj_haslo():
    # Definiuje zestawy znaków dla różnych kategorii
    cyfry = string.digits
    duze_litery = string.ascii_uppercase
    male_litery = string.ascii_lowercase
    znaki_specjalne = '!@#$%^&*()_-+=<>?/{}~'

    dostepne_znaki = ''.join([c for c in string.printable if c not in '1Io0l'])

    dlugosc_hasla = random.randint(10, 15)

    haslo = (
        random.choice(cyfry) +
        random.choice(duze_litery) +
        random.choice(male_litery) +
        random.choice(znaki_specjalne) +
        ''.join(random.choice(dostepne_znaki) for _ in range(dlugosc_hasla - 4))
    )

    haslo = ''.join(random.sample(haslo, len(haslo)))

    return haslo

wygenerowane_haslo = generuj_haslo()
print("Wygenerowane hasło:", wygenerowane_haslo)

# Day 57
# 21 niewygodnych prawd o programistycznym świecie

# Day 58
# Set

# Day 59
# Write a function that takes a list of integers and returns a list containing only the unique values in that list.

import random

#setting the list length to a random value but with a maximum of 20
len_list = random.randint(1, 20)

#generating a list of integers
my_list = [random.randint(1, 100) for i in range(len_list)]

def convert_list():
    #Function takes a list of integers and returns a list containing only the unique values.
    my_set = set(my_list)
    return my_set

print(my_list)

result = convert_list()
print(result)

# Day 61
# Write a program that randomly selects 5 integers from 1 to 10 and then asks the user to guess at least one of these numbers. 
# The program should answer whether the number provided by the user was one of the ones drawn or not.

import random

numbers_drawn = random.sample(range(1, 10), 5)

guess_number = input("Guess number from 1 to 10: ")
guessed_number = int(guess_number)

if guessed_number in numbers_drawn:
    print("Yeah! You guessed.")
else:
    print("Nope! You missed.")
